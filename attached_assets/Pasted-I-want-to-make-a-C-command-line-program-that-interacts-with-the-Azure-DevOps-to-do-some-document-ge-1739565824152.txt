I want to make a C# command line program that interacts with the Azure DevOps to do some document generation tasks. The app will take command line arguments, the first is the name of the source file, the second will eb the name of the output file. We will be reading a Word document and looking for specific tags that let us know we need to get data from ADO and replace it. As we read a line and process it, we will need to add that line to a new document so that the original document isn't changed and we generate a new Word document that contains the additional information retrieved from ADO.  The app should open the file and then read each line of text in the file and search for a tag that starts with "[[" and ends with "]]". The text in the middle will tell the app what operation to perform. The current tags that will exist are "WorkItem:xxxx", "QueryID:xxxx", "AcronymTable:true", where xxxx is an identifier used to call the right item in ADO. We want to support additional tags in the future, so that should be a consideration in designing the code.  For the WorkItem:xxxx tag, the xxxx will represent the work item ID that needs to be accessed via the WorkItemTrackingHttpClient class/libraries in .NET and have specific fields returned. In this case we are accessing a work item type named DocumentPart and we want the DocumentText field to be returned. For the QueryID:xxxx field, the xxxx denotes the guid of teh query to be used in teh call to the ADO to get the results of a stored query. The tag AcronmTable:True should insert a table of acronyms that have been detected as the document is processed. As each line is read, we need to use regular expressions to look for any words that are at least 2 characters in length and are all capitalized and are surrounded with parenthesis like the following "(API)", this will tell us that it is an acronym. If an acronym is found, it should be stored in a Dictionary that captures the acronym and the defintion. To find the definition we need to use regex to look at the words preceeding the detected acronym and capture all the words that start with a capital letter. Here is an example sentence, "We are using an Application Programmable Interface (API) to do this work.". In this example "API" would be captured as the acronym and the definition would be "Application Programmable Interface". This app needs to have robust error handling that prints the details of the error so that it can be corrected. The flow will be the following: read a line, look for tags matching the patterns above, if a WorkItem tag is found, call the method that gets the data from ADO, we need the DocumentText from the DocumentPart workitem and then replace the entire tag, i.e "[[WorkItem:1234]]" with the DocumentText that was returned, then continue processing the line. Once the end of the line is reached, replace the line that was just processed and add it to the new Word Document that we careated with the name passed to the program in the output arguement, command line argument 2. If a QueryID tag is found, use the .NET class to call the stored query in ADO that is specified by the query id and take the results and create an table that reflects those results. Take the  table and replace the complete tag in the line of text, then continue processing the line. Once it is complete, add it to the new Word Document.  If AcronymTable is found, then run a method that builds a table from the data in the Dictionary we have been using to capture acronyms and their definitions and add it to the new Word Document. The challenges we face will be that the information that comes back from ADO for the WorkItem and QueryID tags will be returned as HTML and we can't insert that directly into a Word Document and have it look right. We will have to process the HTML and either convert it or use it to generate the right information in Word to accurately render the result. For instance, we will have to convert the tags used to make an HTML table into calls to the interop API for Word to create a table that looks the same and doesn't have all the HTML. All the HTML will have be removed from the data retrieved from ADO. We should target .NET 8 and we should generate unit tests for our functionality that use Moq to mock interactions with ADO so that we can do some testing without having to actually access ADO. We should also have robust error handling and logging using the Microsoft.Logging extensions. As we process each line we should write the input line to the console and the output line to the console so that we can see in real-time what the processing looks like. 
